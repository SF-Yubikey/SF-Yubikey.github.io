---
title: TOTP Enrollment POST Requests
date: 2020-10-28 14:20:00 -05:00
position: 5
---

# POST Request Documentation

### Wireshark and Chrome Developer Tool Logs

The Wireshark capture of the enrollment process is [Enrollmentcapture.pcapng](/uploads/Enrollmentcapture.pcapng), which uses [keylog.txt](/uploads/keylog.txt) for decryption by adding the file as a (pre)-Master-Secret log filename in Wireshark. To set the (pre)-Master-Secret log, select edit on Wireshark's toolbar then select preferences. Under preferences, select protocols and scroll down to TLS and set keylog.txt as the (pre)-Master-Secret log filename.

Two logs from the Chrome developer tools were captured. One log uses a third-party authenticator application, and its log can be found [here](/uploads/3rdPartyEnrollment.har). The other log uses a phone along with the Microsoft's authenticator application, which can be found [here](/uploads/MicrosoftauthenticatorEnrollment.har). Both har files starts capturing the after the one clicks next on the help us protect your account page shown below and stops when after the enrollment process finishes.

![helpstartcropped.png](/uploads/helpstartcropped.png)

### Findings

The three POST requests sent in the TOTP enrollment process are InitializeMobileAppRegistration, AddSecurityInfo, and VerifySecurityInfo. All three requests use JSON for their bodies.

#### InitializeMobileAppRegistration

InitializeMobileAppRegistration occurs when one clicks the next button in the screenshot below.

![InitializeMobileAppRegistrationCropped.png](/uploads/InitializeMobileAppRegistrationCropped.png)

InitializeMobileAppRegistration’s payload contains the JSON name value pair securityInfoType: Integer. SecurityInfoType’s value is set to 2 if one chose to use Microsoft's authenticator application.

![InitializeMobileAppRegistrationPhone.png](/uploads/InitializeMobileAppRegistrationPhone.png)

If one chose to use a third-party authenticator, securityInfoType’s value is set to 3.

![InitializeMobileAppRegistration3party.png](/uploads/InitializeMobileAppRegistration3party.png)

By comparing the Wireshark and Chrome's developer tool logs, it was determined that InitializeMobileAppRegistration corresponds to packet 359 of the Wireshark capture.

#### AddSecurityInfo

AddSecurityInfo occurs when one clicks the next button in the screenshot below.

![AddSecurityInfoCrop.png](/uploads/AddSecurityInfoCrop.png)

AddSecurityInfo contains the JSON name pairs of Type: Integer and Data: {SecertKey: String, affinityRegion: String}. Type corresponds to the securityInfoType found in InitializeMobileAppRegistration. SecertKey contains the secret key used by the authenticator application. AffinityRegion corresponds the affinity region of the user. During our testing, we found that affinityRegion was set to null if one opted for a third-party authenticator.

![AddSecurityInfo3pCrop.png](/uploads/AddSecurityInfo3pCrop.png)

If one opted to use Microsoft's authenticator application, their affinityRegion will have a value. In our testing, our affinityRegion value was "wus", which is likely the affinityRegion that contains Dallas, Texas.

![AddSecurityInfophoneCrop.png](/uploads/AddSecurityInfophoneCrop.png)

By comparing the Wireshark and Chrome's developer tool logs, it was determined that the AddSecurityInfo corresponds to packet 535 of the Wireshark capture.

#### VerifySecurityInfo

VerifySecurityInfo occurs when one clicks next in the screenshot below.
![VerifySecurityInfoCropped.png](/uploads/VerifySecurityInfoCropped.png)

VerifySecurityInfo contains the JSON name value pairs of Type: Integer, VerificationContext: String, and VerificationData: String. Type corresponds to the securityInfoType found in the initializeMobileAppRegistration.  VerificationContext’s string value is a string that matches the VerificationContext sent in the response to the AddSecurityInfo POST request.
![AddSecurityInfoReponse-c3d5e5.png](/uploads/AddSecurityInfoReponse-c3d5e5.png)

If one uses a third-party authenticator, VerificationData contains the six-digit TOTP string generated by the authenticator.
![VerifySecurityInfoThirdParty.png](/uploads/VerifySecurityInfoThirdParty.png)

If one uses Microsoft's authenticator application, VerificationData’s value is set to null, and the VerifySecurityInfo request is repeatedly sent until one interacts with Microsoft's authenticator application on their phone.
![VerifySecurityInfoMicrosoft.png](/uploads/VerifySecurityInfoMicrosoft.png)

By comparing the Wireshark and Chrome's developer tool logs, it was found that  VerificationData corresponds to packet 600 in the Wireshark capture.